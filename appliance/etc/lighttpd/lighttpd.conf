server.modules = (
  "mod_access",
  "mod_alias",
  "mod_compress",
  "mod_redirect",
  "mod_setenv",
  "mod_accesslog",
  "mod_webdav",
  "mod_extforward",
)

server.document-root        = "/var/www/webdav"
server.upload-dirs          = ( "/var/cache/lighttpd/uploads" )
server.errorlog             = "/var/log/lighttpd/error.log"
accesslog.filename          = "/var/log/lighttpd/access.log"
server.pid-file             = "/var/run/lighttpd.pid"
server.username             = "www-data"
server.groupname            = "www-data"
server.port                 = 80

index-file.names            = ( "index.html" )
url.access-deny             = ( "~", ".inc" )
static-file.exclude-extensions = ( ".php", ".pl", ".fcgi" )

compress.cache-dir          = "/var/cache/lighttpd/compress/"
compress.filetype           = ( "application/javascript", "text/css", "text/html", "text/plain" )

# Setup auth
auth.backend = "htpasswd"
auth.backend.htpasswd.userfile = "/var/www/passwd"

# Handle proxied traffic from router (on both IPs)
extforward.headers = ("X-Real-IP")
extforward.forwarder = ( "192.168.20.1" => "trust", "192.168.1.1" => "trust" )

# default listening port for IPv6 falls back to the IPv4 port
include_shell "/usr/share/lighttpd/use-ipv6.pl " + server.port
include_shell "/usr/share/lighttpd/create-mime.assign.pl"
include_shell "/usr/share/lighttpd/include-conf-enabled.pl"

# Enable WebDAV at root
webdav.activate = "enable"
webdav.is-readonly = "disable"
webdav.sqlite-db-name = "/var/run/lighttpd/lighttpd.webdav_lock.db"

# Seperate directories for other services
alias.url = (
  "/keeweb" => "/var/www/html/keeweb",
  "/.well-known" => "/var/www/html/.well-known"
)
$HTTP["url"] =~ "^/keeweb($|/)" {
  webdav.activate = "disable"
}

# Protect .kdbx files with basic auth unless requested by LAN subnet (Exclude IoT subnet)
$HTTP["remoteip"] != "192.168.1.1/24" {
  $HTTP["url"] =~ "^/*\.kdbx$" {
    $HTTP["request-method"] !~ "^(OPTIONS)$" {
      auth.require = ( "" => ( "method" => "basic",
        "realm" => "KeeWeb file",
        "require" => "valid-user" ) )
    }
  }
}

# Deny external access to all by keeweb site
$HTTP["remoteip"] != "192.168.1.1/16" {
  $HTTP["url"] !~ "^/keeweb($|/)" {
    url.access-deny = ( "" )
  }
}

# CORS Headers
setenv.add-response-header = ( 
  "Access-Control-Allow-Origin" => "*", 
  "Access-Control-Allow-Headers" => "accept, origin, x-requested-with, content-type, cache-control,  authorization, if-match, destination, overwrite",
  "Access-Control-Expose-Headers" => "ETag",
  "Access-Control-Allow-Methods" => "GET, HEAD, POST, PUT, OPTIONS, MOVE, DELETE, COPY, LOCK, UNLOCK",
  "Access-Control-Allow-Credentials" => "true"
)

# Enable Last-Modified header
mimetype.assign += (
  "" => "application/octet-stream"
)

# SSL setup
$SERVER["socket"] == ":443" {
  ssl.engine              = "enable"
  ssl.ca-file             = "/etc/letsencrypt/live/memory.grid.robotjamie.com/chain.pem"
  ssl.pemfile             = "/etc/letsencrypt/live/memory.grid.robotjamie.com/merged.pem"
}

# Force redirect to HTTPS, except for .well-known (to allow LE verification)
$HTTP["scheme"] == "http" {
  $HTTP["url"] !~ "^/\.well-known($|/)" {
    $HTTP["host"] =~ ".*" {
      url.redirect = (".*" => "https://%0$0")
    }
  }
}
